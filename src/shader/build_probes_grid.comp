#version 450

#ifndef LOCAL_SIZE_X 
#define LOCAL_SIZE_X 256
#endif 

layout (local_size_x = LOCAL_SIZE_X) in;
struct SphericalTrianglePatch
{
	vec4 probePosition; // + Probe radius
	vec4 v1;			// + probeHash
	vec4 v2;			// + probeIntersectionNb
	vec4 v3;			// + probeGridHash
};

struct CellInfo
{
	int start;
	int end;
};

layout (std140, binding = 0) readonly buffer SphericalTrianglePatches
{ 
	uint spTriangleNb;
	SphericalTrianglePatch spTriangles[];
};

layout (std140, binding = 2) writeonly buffer AccelerationStructure
{
	CellInfo cellsInformation[];
};

shared SphericalTrianglePatch sharedData[LOCAL_SIZE_X + 1];

void main() 
{
	int id = int(dot(gl_GlobalInvocationID, vec3(1, gl_NumWorkGroups.x, gl_NumWorkGroups.y * gl_NumWorkGroups.x)));
	if(id >= spTriangleNb) return;

	SphericalTrianglePatch currentProbe = spTriangles[id];
	sharedData[gl_LocalInvocationIndex + 1] = currentProbe;

	if(id > 0 && gl_LocalInvocationIndex == 0)
	{
		sharedData[0] = spTriangles[id-1];
	}
	
	memoryBarrierShared();
	barrier();

	if(id == 0 || currentProbe.v3.w != sharedData[gl_LocalInvocationIndex].v3.w)
	{
		cellsInformation[int(currentProbe.v3.w)].start = id;

		if(id > 0)
		{
			cellsInformation[int(sharedData[gl_LocalInvocationIndex].v3.w)].end = id -1;
		}
	}

	if(id == spTriangleNb-1)
	{
		cellsInformation[int(currentProbe.v3.w)].end = id;
	}
}
