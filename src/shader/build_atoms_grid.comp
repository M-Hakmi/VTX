#version 450

#ifndef LOCAL_SIZE_X 
#define LOCAL_SIZE_X 256
#endif 

layout (local_size_x = LOCAL_SIZE_X) in;

struct AtomInformation
{
	vec3  position;
	float radius;
	uint  startCircleIdx;
	uint  neighborNumber;
	uint  gridHash;
};

struct CellInfo
{
	int start;
	int end;
};

layout (std140, binding = 0) buffer AtomPositions
{ 
	uint atomNumber;
	AtomInformation atomsInformation[];
};

layout (std140, binding = 2) writeonly buffer AccelerationStructure
{
	CellInfo cellsInformation[];
};

shared AtomInformation sharedData[LOCAL_SIZE_X + 1];

void main() 
{
	int id = int(dot(gl_GlobalInvocationID, vec3(1, gl_NumWorkGroups.x, gl_NumWorkGroups.y * gl_NumWorkGroups.x)));
	if(id >= atomNumber) return;

	AtomInformation currentAtom = atomsInformation[id];
	sharedData[gl_LocalInvocationIndex + 1] = currentAtom;

	if(id > 0 && gl_LocalInvocationIndex == 0)
	{
		sharedData[0] = atomsInformation[id-1];
	}
	
	memoryBarrierShared();
	barrier();

	if(id == 0 || currentAtom.gridHash != sharedData[gl_LocalInvocationIndex].gridHash)
	{
		cellsInformation[currentAtom.gridHash].start = id;

		if(id > 0)
		{
			cellsInformation[sharedData[gl_LocalInvocationIndex].gridHash].end = id -1;
		}
	}

	if(id == atomNumber-1)
	{
		cellsInformation[currentAtom.gridHash].end = id;
	}
}
