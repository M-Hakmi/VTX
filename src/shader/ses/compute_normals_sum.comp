#version 450
#include "include/helper.glsl"
#include "../constant.glsl"

#ifndef LOCAL_SIZE_X
	#define LOCAL_SIZE_X 1
#endif
#ifndef LOCAL_SIZE_Y
	#define LOCAL_SIZE_Y 1
#endif
#ifndef LOCAL_SIZE_Z
	#define LOCAL_SIZE_Z 1
#endif


layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

// Uniforms.
uniform uint uSize;

// SSBO.
layout (std140, binding = 0) readonly buffer Positions
{
	vec4[] positions;
};

layout (std140, binding = 1) writeonly buffer Normals
{
	vec4[] normals;
};

layout (std430, binding = 2) readonly buffer Indices
{
	uint[] indices;
};

layout (std430, binding = 3) writeonly buffer Counters
{
	uint[] counters;
};

layout (std140, binding = 4) writeonly buffer NormalsCasted
{
	ivec4[] normalsCasted;
};

#define atomicAddFloatX(MEM, INDATA)\
{ \
    uint expected_mem = MEM; \
    float input_mem = (uintBitsToFloat(MEM) + INDATA); \
    uint returned_mem = atomicCompSwap(MEM, expected_mem, floatBitsToUint(input_mem)); \
    while(returned_mem != expected_mem){ \
        expected_mem = returned_mem; \
        input_mem = (uintBitsToFloat(expected_mem) + INDATA) \
        returned_mem = atomicCompSwap(MEM, expected_mem, floatBitsToUint(input_mem)); \
    } \
}

void main()
{
	uint hash = globalInvocationHash( gl_GlobalInvocationID, gl_NumWorkGroups, gl_WorkGroupSize );
	
	hash *= 3;
	
	/*
	if( hash >= uSize - 2 )
	{
		return;
	}
	*/

	const vec3 normal = normalize (
							cross( 
								vec3( positions[ indices[ hash + 1 ] ] - positions[ indices[ hash + 2 ] ] ),
								vec3( positions[ indices[ hash + 1 ] ] - positions[ indices[ hash + 0 ] ] ) ) );

	for( uint i = 0; i < 3; ++i )
	{
		
		//normals[ indices[ hash + i ] ] += vec4( normal, 0.0f );

		atomicAdd( normalsCasted[ indices[ hash + i ] ].x, int( normal.x / EPSILON ) );
		atomicAdd( normalsCasted[ indices[ hash + i ] ].y, int( normal.y / EPSILON ) );
		atomicAdd( normalsCasted[ indices[ hash + i ] ].z, int( normal.z / EPSILON ) );

		//atomicAdd( normalsCasted[ indices[ hash + i ] ].x, floatBitsToUint( normal.x ) );
		//atomicAdd( normalsCasted[ indices[ hash + i ] ].y, floatBitsToUint( normal.y ) );
		//atomicAdd( normalsCasted[ indices[ hash + i ] ].z, floatBitsToUint( normal.z ) );
		
		atomicAdd( counters[ indices [ hash + i ] ], 1 );
	}

	//memoryBarrierBuffer();
}