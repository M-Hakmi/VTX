#version 450
#include "../constant.glsl"
#include "include/helper.glsl"

#ifndef LOCAL_SIZE_X
	#define LOCAL_SIZE_X 1
#endif
#ifndef LOCAL_SIZE_Y
	#define LOCAL_SIZE_Y 1
#endif
#ifndef LOCAL_SIZE_Z
	#define LOCAL_SIZE_Z 1
#endif
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

// Uniforms.
uniform uint uSize;
uniform uint uSizeReduced;

// Data struct.
struct Range
{
	uint first;
	uint count;
};

// SSBO.
layout (std140, binding = 0) writeonly buffer TrianglePositions
{
	vec4[] trianglePositions;
};

layout (std430, binding = 1) writeonly buffer TriangleIndices
{
	uint[] triangleIndices;
};

layout (std140, binding = 2) writeonly buffer TriangleColors
{
	vec4[] triangleColors;
};

layout (std430, binding = 3) writeonly buffer TriangleVisibilities
{
	uint[] triangleVisibilities;
};

layout (std430, binding = 4) writeonly buffer TriangleAtomIds
{
	uint[] triangleAtomIds;
};

layout (std140, binding = 5) readonly buffer TrianglePositionsTmp
{
	vec4[] trianglePositionsTmp;
};

layout (std430, binding = 6) readonly buffer TriangleAtomIndicesTmp
{
	uint[] triangleAtomIndicesTmp;
};

layout (std430, binding = 7) readonly buffer TriangleValidities
{
	uint[] triangleValidities;
};

layout (std430, binding = 8) readonly buffer TrianglesPerAtomRanges
{ 
	Range[] trianglesPerAtomRanges;
};

layout (std140, binding = 9) readonly buffer AtomColors
{
	vec4[] atomColors;
};

layout (std430, binding = 10) readonly buffer AtomVisibilities
{
	uint[] atomVisibilities;
};

layout (std430, binding = 11) readonly buffer AtomIds
{
	uint[] atomIds;
};

layout (std430, binding = 12) buffer TrianglesPerAtom
{
	uint[] trianglesPerAtom;
};

/*
layout (std430, binding = 15) writeonly buffer Debug
{
	uint[] debug;
};
*/

void main()
{
	uint hash = globalInvocationHash( gl_GlobalInvocationID, gl_NumWorkGroups, gl_WorkGroupSize );
	hash *= 3;
	
	if( hash >= uSize )
	{
		return;
	}
	
	if( triangleValidities[ hash ] == 0 )
	{
		return;
	}

	const uint atomIndice = triangleAtomIndicesTmp[ hash ];
	
	
	const uint first = trianglesPerAtomRanges[ atomIndice ].first;
	const uint count = trianglesPerAtomRanges[ atomIndice ].count;
	
	const uint indexTriangle = first + ( count - atomicAdd( trianglesPerAtom[ atomIndice ], -3 ) );
	
	for( uint i = 0; i < 3; i++ )
	{
		const uint index = hash + i;
		const uint indexNew = indexTriangle + i;
		
		trianglePositions[ indexNew ] = trianglePositionsTmp[ index ];
		triangleIndices[ indexNew ] = indexNew;
		triangleColors[ indexNew ] = atomColors[ atomIndice ];
		triangleVisibilities[ indexNew ] = atomVisibilities[ atomIndice ];
		triangleAtomIds[ indexNew ] = atomIds[ atomIndice ];
	}
}