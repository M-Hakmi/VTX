#version 450
#include "include/helper.glsl"
#include "../constant.glsl"

#ifndef LOCAL_SIZE_X
	#define LOCAL_SIZE_X 1
#endif
#ifndef LOCAL_SIZE_Y
	#define LOCAL_SIZE_Y 1
#endif
#ifndef LOCAL_SIZE_Z
	#define LOCAL_SIZE_Z 1
#endif
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

// Uniforms.
uniform uint uSize;

// SSBO.
layout (std140, binding = 0) buffer Normals
{
	vec4[] normals;
};

layout (std430, binding = 1) buffer Counters
{
	uint[] counters;
};

layout (std140, binding = 2) readonly buffer NormalsCasted
{
	ivec4[] normalsCasted;
};

void main()
{
	uint hash = globalInvocationHash( gl_GlobalInvocationID, gl_NumWorkGroups, gl_WorkGroupSize );
	
	if( hash >= uSize )
	{
		return;
	}

	const vec3 normal = vec3( normalsCasted[ hash ] ) / float( counters[ hash ] ) * EPSILON;
	normals[ hash ] = vec4( normalize( normal ), 1.f );
}